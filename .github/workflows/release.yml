name: Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  workflow_dispatch:


# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Performs quick checks before the expensive test runs
  check-and-lint:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 16.x ]

    steps:
      - uses: ioBroker/testing-action-check@v1
        with:
          node-version: '16.x'
          # Uncomment the following line if your adapter cannot be installed using 'npm ci'
          # install-command: 'npm install'
          type-checking: true
          lint: true

  # Runs adapter tests on all supported node versions and OSes
  adapter-tests:
    #if: contains(github.event.head_commit.message, '[skip ci]') == false
    if: false

    needs: [ check-and-lint ]

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [ 16.x, 18.x ]
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - uses: ioBroker/testing-action-adapter@v1
        with:
          node-version: ${{ matrix.node-version }}
          os: ${{ matrix.os }}
          # Uncomment the following line if your adapter cannot be installed using 'npm ci'
          # install-command: 'npm install'
          build: true

  # Release the final package to NPM
  release:
    needs: [ adapter-tests ]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.x ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Extract the version from the tag
        id: extract_release
        run: |
          echo "tag=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
          echo "version=$(echo $GITHUB_REF | cut -d / -f 3 | sed 's/.\{3\}$//')" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: extract_changelog
        uses: sean0x42/markdown-extract@v2
        with:
          file: README.md
          pattern: ${{ steps.extract_release.outputs.version }}

      - name: Install Dependencies
        run: npm ci
      - name: Create a clean build
        run: npm run build

      #      - name: Publish package to npm
      #        env:
      #          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      #        run: |
      #          npm whoami
      #          npm publish

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.extract_release.outputs.version }}
          draft: true
          # Prerelease versions create prereleases on Github
          #prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
          body: ${{ steps.extract_changelog.outputs.markdown }}

      # When using Sentry for error reporting, Sentry could be informed about new releases
      # To enable create a API-Token in Sentry (User settings, API keys)
      # Enter this token as a GitHub secret (with name SENTRY_AUTH_TOKEN) in the repository options
      # Then uncomment and customize the following block:
      #- name: Notify Sentry.io about the release
      #  run: |
      #      npm i -g @sentry/cli
      #      export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
      #      export SENTRY_URL=https://sentry.iobroker.net
      #      export SENTRY_ORG=iobroker
      #      export SENTRY_PROJECT=iobroker-template
      #      export SENTRY_VERSION=iobroker.template@${{ steps.extract_release.outputs.VERSION }}
      #      sentry-cli releases new $SENTRY_VERSION
      #      sentry-cli releases finalize $SENTRY_VERSION
      #      # Add the following line BEFORE finalize if repositories are connected in Sentry
      #      #sentry-cli releases set-commits $SENTRY_VERSION --auto
      #      # Add the following line BEFORE finalize if sourcemap uploads are needed
      #      #sentry-cli releases files $SENTRY_VERSION upload-sourcemaps build/